
Shape which is linked to topic is handled via topic global css engine. That's means shape's color and opacities.
Lines and points automatically linked to topic when ...
Either if their id is a predefined topic. Or, otherwise, if they have declared "pcolor", then their id is declared as a predefined topic with this color.  (Part of declarations is done in expands-conf.js.) 

This creates a css and code redundancy, when topic is not met in texts, but topic-engine is created for this topic in the application. (Perhaps, to fix it in the future versions.)

Before Dec 18, 2024, there was topic-engine of version 2. Then some lemmas began to convert to tpversion 2. This job is planned to do in parallel with other projects.

Note. As it is said, there is no problem when topic exist in js-colde, but not used in the text. In the opposite case, when text uses topic non-existing in js-code, there is a message in console. (GUI-message has to be designed yet.)

tpversion 2. Since Dec 18, 2024.
================================

Color of topic is defined in "fixed-colors" array or as pcolor for the shape in config files.
This color is defined as rgb(a) array
[r,g,b,{opacity1},{opacity2}]. These opacities are optional.
Missing {opacity1} means 1.
Missing {opacity2} means that difference between highlighted and low opacities is controlled by 
sconf.TP_OPACITY_HIGH;
sconf.TP_OPACITY_LOW;
They result in css-property of the shape "opacity". (This is a separate property than element style color or element attributes.)

Topic shapes visibilities controlled via their css-class with "tofill" and/or "tostroke" classes. These classes do trigger corresponding fill/stroke opacities with values 1 or 0.

The idea of resulted css can be taken from the small file:
tp-glocss-v2.js (for tpversion 2), or from the file
topics-media-glocss.js (for previos versions).

Color management of anchors which trigger topic-shapes is a bit different than for shapes and coded in
topics-anchor-glocss.js









shape is highlighted in two ways:
I) via tp-name match on container and on the shape (via css)
II) via .tpshape { opacity : HIG; ) via assigning flag
        tpshape to domelement via JS









************************************
Former tp-model.

    1. tp-css ignores low-opacity from fixed-colors. It is always fixed opacity.
       to set your own opacity for standard-points and standard-lines, use notp
       prefix patch which replaces tp-... class with notp- ... class.

    2. format: array fixedColors[ normalized-topic-css-name ] = colorArray
       fixedColors stems from predefinedTopics[ topicKey ]; 

        fixedColors come from sconf.original_points and set
            in form fixedColors[ normalized-topic-id ] = array aka [0,21,0, 0.5 ];
                bookkeeping is:
                    var tk = sDomF.topicIdUpperCase_2_underscore( topicKey );
                    fixedColors[ tk ] = predefinedTopics[ topicKey ];

    3.
        rgba_low (ie opacity) in 'topic-colors" is simply ignored in anchor-tp-links,
        tplink = id2tplink[ tplinkConf ] still keeps low opacity info

    4.
        normalizedIds_2_entireLemmaTopics still preserves low opacity array and adds merged and
        converted rgba_low, rgba_high.
            normalizedIds_2_entireLemmaTopics[ wwCase( topicId_ ) ] = {
                'fixed-color' : colorArray,
                ...
                rgba_low :   //from sconf...opacity if any or from default
                rgba_high
            }
    5.
        method getFixedColor( ... does retrieve low opacity


